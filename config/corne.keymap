/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&lt {
    quick-tap-ms = <200>;
    tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <2 3>;
            timeout-ms = <30>;
            layers = <0>;
        };

        combo_caps {
            bindings = <&kp CAPS>;
            key-positions = <28 31>;
            timeout-ms = <30>;
            layers = <0>;
        };

        combo_sqt {
            bindings = <&kp SQT>;
            key-positions = <8 9>;
            timeout-ms = <30>;
            layers = <0>;
        };

        combo_colon {
            bindings = <&kp COLON>;
            key-positions = <9 10>;
            timeout-ms = <30>;
            layers = <0>;
        };

        combo_caps_word {
            bindings = <&caps_word>;
            key-positions = <16 19>;
            timeout-ms = <30>;
        };

        combo_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <20 21>;
            timeout-ms = <30>;
        };

        combo_delete_word {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <32 33>;
            timeout-ms = <30>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <26 27>;
            timeout-ms = <30>;
        };

        combo_delete {
            bindings = <&kp DELETE>;
            key-positions = <34 33>;
            timeout-ms = <30>;
        };

        combo_reset_left {
            bindings = <&sys_reset>;
            key-positions = <5 29>;
        };

        combo_reset_right {
            bindings = <&sys_reset>;
            key-positions = <6 30>;
        };

        bootloader_left {
            bindings = <&bootloader>;
            key-positions = <5 17 29>;
        };

        bootloader_right {
            bindings = <&bootloader>;
            key-positions = <6 18 30>;
        };

        reset_layer {
            bindings = <&to 0>;
            key-positions = <2 3>;
            layers = <1 2 3>;
            timeout-ms = <30>;
        };
    };

    behaviors {
        brm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <170>;    // <---[[moderate duration]]
            quick-tap-ms = <200>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_TOG";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        tog_sl: behavior_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "TOG_SL";
            bindings = <&tog>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    macros {
        personal_email: personal_email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp F &kp O &kp N &kp S &kp O &kp C &kp R &kp A &kp P &kp O &kp S &kp O &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
            label = "PERSONAL_EMAIL";
        };

        paddle_email: paddle_email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp F &kp O &kp N &kp S &kp O &kp DOT &kp R &kp A &kp P &kp O &kp S &kp O &kp AT &kp P &kp A &kp D &kp D &kp L &kp E &kp DOT &kp C &kp O &kp M>;
            label = "PADDLE_EMAIL";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q            &kp W            &kp F                &kp P              &kp B          &kp J        &kp L               &kp U             &kp Y               &kp SEMICOLON         &none
&none  &kp A            &kp R            &kp S                &kp T              &kp G          &kp M        &kp N               &kp E             &kp I               &kp O                 &none
&none  &brm LEFT_GUI Z  &brm LEFT_ALT X  &brm LEFT_CONTROL C  &brm LEFT_SHIFT D  &kp V          &kp K        &brm RIGHT_SHIFT H  &brm RCTRL COMMA  &brm RIGHT_ALT DOT  &brm RIGHT_GUI SLASH  &none
                                         &none                &tog_sl 1 2        &lt 1 SPACE    &lt 2 ENTER  &mo_tog 3 3         &none
            >;
        };

        num_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp N1                       &kp N2        &kp N3        &kp N4        &kp N5        &kp N6     &kp N7        &kp N8        &kp N9        &kp N0     &none
&none  &mt C_PREVIOUS C_PLAY_PAUSE  &kp C_NEXT    &kp C_VOL_DN  &kp C_VOL_UP  &kp K_MUTE    &kp DOT    &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp MINUS  &trans
&none  &bt BT_SEL 0                 &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR    &kp COMMA  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PLUS   &trans
                                                  &trans        &trans        &trans        &trans     &trans        &kp EQUAL
            >;
        };

        sym_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp EXCL       &kp AT            &kp HASH              &kp DLLR        &kp PRCNT           &kp CARET          &kp AMPS         &kp ASTRK       &kp LPAR   &kp RPAR           &none
&none  &kp GRAVE      &kp TILDE         &kp LS(LA(NUMBER_2))  &kp LEFT_BRACE  &kp LEFT_BRACKET    &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp MINUS       &kp EQUAL  &kp DOUBLE_QUOTES  &none
&none  &kp LA(GRAVE)  &kp LA(NUMBER_9)  &kp LA(NUMBER_0)      &trans          &kp LESS_THAN       &kp GREATER_THAN   &kp PIPE         &kp UNDERSCORE  &kp PLUS   &kp BACKSLASH      &none
                                        &trans                &trans          &trans              &trans             &trans           &trans
            >;
        };

        nav_layer {
            bindings = <
&none  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3   &kp KP_NUMBER_4  &kp KP_NUMBER_5    &kp KP_NUMBER_6  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp NUMBER_9  &kp KP_NUMBER_0  &none
&none  &none            &none            &none             &none            &none              &kp LEFT         &kp DOWN         &kp UP           &kp RIGHT     &trans           &none
&none  &kp LEFT_GUI     &kp LEFT_ALT     &kp LEFT_CONTROL  &kp LEFT_SHIFT   &trans             &kp HOME         &kp PAGE_DOWN    &kp PAGE_UP      &kp END       &trans           &none
                                         &trans            &trans           &trans             &trans           &trans           &trans
            >;
        };
    };
};
